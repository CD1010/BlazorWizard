@using Fluxor;
@using BlazorWizard.Store.Wizard;
@using Blazorise; 
@inject IState<WizardState> state
@page "/wizarddemo"
@inject IDispatcher dispatcher

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<WizardDemoComponent @ref="DemoComp"></WizardDemoComponent>

<Blazorise.Button class="btn-lg btn-primary" Clicked="OnSubmit">Toggle State</Blazorise.Button>

@code {


    WizardDemoComponent DemoComp { get; set; }

    void OnSubmit()
    {
        if (state.Value.States[1].Visible == false)
        {
            dispatcher.Dispatch(new BlazorWizard.Store.Wizard.WizardAllOnAction());
            System.Diagnostics.Debug.WriteLine("All On");
        }
        else
        {
            dispatcher.Dispatch(new BlazorWizard.Store.Wizard.WizardFirstOnAction());
            System.Diagnostics.Debug.WriteLine("First ON");
        }

        ShowStates();
    }

    protected override void OnInitialized()
    {


        //   dispatcher.Dispatch(new BlazorWizard.Store.Wizard.WizardFirstOnAction());
        // System.Diagnostics.Debug.WriteLine("First on Init");
        //StateHasChanged();
        base.OnInitialized();
    }
    protected override void OnParametersSet()
    {

        //state.StateChanged += (o, ws) =>
        //{
        //    StateHasChanged();
        //};
        base.OnParametersSet();

    }
    void ShowStates()
    {
        int i = 0;
        System.Diagnostics.Debug.WriteLine("States");
        foreach (var item in state.Value.States)
        {
            DemoComp.TheWiz.Steps[i].SetEnabled(item.Visible);
            i++;
            System.Diagnostics.Debug.WriteLine(item.Visible);
        }
    }
}